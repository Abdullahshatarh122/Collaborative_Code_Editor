// src/useSelf.ts
import { useSyncExternalStoreWithSelector as u } from "use-sync-external-store/shim/with-selector.js";
function m(e, s = (t) => t, o) {
  return u(
    (n) => f(e, n),
    () => c(e),
    () => c(e),
    s,
    o
  );
}
function f(e, s) {
  let o = (t, n) => {
    typeof n == "string" && n === "local" && s();
  };
  return e.on("change", o), () => e.off("change", o);
}
function c(e) {
  return e.getLocalState();
}

// src/useUsers.ts
import { useCallback as S, useRef as h } from "react";
import { useSyncExternalStoreWithSelector as w } from "use-sync-external-store/shim/with-selector.js";
function U(e, s = (t) => t, o) {
  let t = h();
  t.current || (t.current = new Map(e.getStates()));
  let n = S(() => t.current ? t.current : /* @__PURE__ */ new Map(), []), i = w(
    (r) => l(e, r),
    n,
    n,
    s,
    o
  ), l = S(
    (r, p) => {
      let a = () => {
        t.current = new Map(r.getStates()), p();
      };
      return r.on("change", a), () => r.off("change", a);
    },
    []
  );
  return i;
}
export {
  m as useSelf,
  U as useUsers
};
